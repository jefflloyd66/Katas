https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/1

Kata: Building a Forum

# ===== 1: setup

# Setup docker Laravel dev environment
  [ ] Uses current Laravel project docker Setup
  [ ] Web service vhost file serves from forum/public
  [ ] Web, Database and App services are running

  - cp -R /Volumes/casesensitive/other/environments/ProjectTemplates/Laravel/5.5/ .
  - vim docker/vhost.conf
  - dc up --build -d

# Create new laravel project 'forum'
  [ ] Laravel composer project 'forum' installed
  [ ] npm modules installed

  - dc exec app bash
  - laravel new forum
  - cd forum
  - yarn install

# Setup database
  [ ] Database service has new db 'forum' - user 'root', password 'root'
  [ ] Laravel project configured to use forum database

  - mysql -hdatabase -uroot -proot -e 'create schema forum'
  - edit .env file

# Create new Model Thread as a resource controller
 [ ] Created: Model, migration, controller
 [ ] user_id : integer
 [ ] title : string
 [ ] body : text

  - ar make:model Thread -mr

# Create new model Reply as a resource controller
  [ ] Created: Model, migration, controller
  [ ] thread_id : integer
  [ ] user_id : integer
  [ ] body : text

  - ar make:model Reply -mr

# Migrate database
  [ ] tables User, Thread and Reply created

  - ar migrate

# Create Thread factory, associating each Thread to a new user
  [ ] Injects ID from new User

  - database/factories/UserFactory

    'user_id' => function () {
      return factory('App\User')->create()->id;
    },
    'title' => $faker->sentence,
    'body' => $faker->paragraph

# Create Reply factory, associating reply with a new user and a new thread [ps]
  [ ] Injects ID from new User
  [ ] Injects ID from new Thread

  - database/factories/UserFactory

      return [
          'thread_id' => function() {
              return factory('App\Thread')->create()->id;
          },
          'user_id' => function() {
              return factory('App\User')->create()->id;
          },
          'body' => $faker->paragraph()
      ];

# Create 50 new threads in the db
  [ ] Tinker: App\Thread::count() = 50

  - factory('App\Thread', 50)->create()

# Iterate over the previously created threads and create 10 new replies for each thread
  [ ] Tinker: App\Reply::count() = 500

  - App\Thread::all()->each(function($thread) { factory('App\Reply', 10)->create(['thread_id' => $thread->id]); })



# ===== 2: Test driving Threads

# Setup phpunit to use an sqlite in-memory database for tests only
  [ ] phpunit.xml

  - DB_CONNECTION value='sqlite'
  - DB_DATABASE value=':memory:'

# Add authentication scaffolding to project
  [ ] Authentication scaffolding added

  - ar make:auth

# Story: A user can browse all threads: /threads
  [ ] Feature test - a_user_can_browse_all_threads
        Given we have one thread
        When any user browses all threads
        Then one thread is displayed
  [ ] Route/Controller/View
  [ ] Yarn phpunit test commands 'pu' and 'puf'

  - use DatabaseMigrations
  - package.json
  - view threads.index
  - use $response->assertSee()
  - "panel-heading" = Forum threads

        @foreach($threads as $thread)

            <article>
                <h4>{{ $thread->title }}</h4>
                <div class="body">{{ $thread->body }}</div>
            </article>

        @endforeach

# Story: A user can browse a single thread: /threads/id
  [ ] Feature test - a_user_can_browse_a_single_thread
        Given we have a thread
        When any user browses the single thread
        Then the thread title and body should be visible
  [ ] Unit test
  [ ] Route/Controller/View

  - threads.show

# Story: A user can navigate from the threads view, to a single thread
  [ ] Feature test - href around title to single thread display



# ===== 3: A thread can have replies

# Story: A user can read replies associated with a thread: /threads/id
  [ ] Feature test - a_user_can_read_replies_that_are_associated_with_a_thread
        Given we have a thread
        And the thread has replies
        When any user browses the single thread
        Then the replies should be visible
        And each reply should have a header "Name said NNN ago..."
        And the reply owner's name should link to "#"
  [ ] Unit tests
        * Thread belongsTo a creator
        * Thread hasMany replies
        * Reply belongsTo an owner

  - Replies shown in new row, each in a panel
  - Carbon diffForHumans()



# ===== 4: A user may respond to threads

# Refactor replies template out into its own partial

  - threads.reply

# Story: A thread should display its creator's name alongside the title
  [ ] Feature test - a_user_can_browse_a_single_thread
        Given we have a thread
        When any user browses the single thread
        Then the thread's creator's name should be visible

# Story: An authenticated user may participate in forum threads: POST /threads/id/replies
  [ ] Feature test - an_authenticated_user_may_participate_forum_threads
        Given we have an authenticated user
        And an existing thread
        When the user adds a reply to the thread
        Then their reply should be visible on the page
  [ ] Feature test - unauthenticated users may not add a reply

  - add to app/Exceptions/Handler.php::render() at first line "if (app()->environment() === 'testing') throw $exception;"
  - add to ReplyController@store
  - add Thread::addReply
  - add middleware 'auth' to reply controller


# Story: An authenticated user should see a reply form so that they can reply to a thread
  [ ] Feature test - an_authenticated_sees_a_reply_form
        Given we have an authenticated user
        And an existing thread
        When the user browses the single thread
        Then the reply form should be visible

  - add form to show.blade.php with id 'reply_form'
  - route = POST /threads/{id}/replies

# Story: An unauthenticated user should see a link to login page instead of reply form
  [ ] Feature test - unauthenticated_user_does_not_see_reply_form
        Given we have an unauthenticated user
        And an existing thread
        When the user browses the single thread
        Then the reply form should not be visible
        And there should be a link to the login page

# Story: all users should see a link in the nav bar to 'All Threads'
  [ ] Feature test - nav_bar_should_have_link_to_all_threads
        Given we are viewing the nav bar
        When it is displayed
        It should contain a link to "All Threads"

  - new Feature test file NavbarTest


# ===== 6: Authenticated users can create posts

# Story: an authenticated user can create new forum threads
  [ ] Feature test - an_authenticated_user_can_create_new_forum_threads
        Given we have an authenticated user
        When we hit the endpoint to create a new thread
        And when we visit the threads page
        Then we should see the new thread

  - new Feature test file CreateThreadsTest

# Story: guests may not create threads
  [ ] Feature test - guests_may_not_create_threads
        Given we have a guest
        When we hit the endpoint to create a new thread
        Then we expect an exception


# ===== 7: Unit test helpers

# Enable unit tests to pull in helper files
# Create 2 helper methods: 'create' and 'make'
# Create helper method: $this->signIn($user = null)

  - composer.json "autoload-dev" new "files": [ filename ]


# ===== 8: Handling exceptions

# Replace Thread endpoints in routes with a route resource
# Create a form for new threads
# Ensure form is visible only to logged in users
# Add a new feature test for guests not view create thread form



# ===== 9: A thread must belong to a channel
  [ ] Unit test: a_thread_belongs_to_a_channel
  [ ] Unit test: a_thread_can_make_a_string_path



# ===== 10: validation errors

# Story: new threads need to be valid
  [ ] Feature test - a_thread_requires_a_title
  [ ] Feature test - a_thread_requires_a_body
  [ ] Feature test - a_thread_requires_a_valid_channel

# Story: new replies need to be valid
  [ ] Feature test - a_reply_requires_a_body

